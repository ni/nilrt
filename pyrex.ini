# Pyrex User Configuration
#
# The following variables are made available as variable expansions when
# Pyrex is initialized:
#   ${pyrex:pyrexroot}      The absolute path to Pyrex (e.g. $PYREX_ROOT)
#

# Pyrex build information. Any changes to this section will require
# reinitializing the build environment to take effect.
[config]
# The version of Pyrex this config is written against. This option is required
# to be specified in the user config file
confversion = 2

# A list of globs for commands that should be wrapped by Pyrex. Overrides the
# command set specified by the container itself when it was captured. Any path
# starting with a "!" will be excluded from being wrapped by Pyrex and will
# run directly in the host environment
#commands =
#    ${env:PYREX_OEROOT}/bitbake/bin/*
#    ${env:PYREX_OEROOT}/scripts/*
#    !${env:PYREX_OEROOT}/scripts/runqemu*

# The Container engine executable (e.g. docker, podman) to use. If the path
# does not start with a "/", the $PATH environment variable will be searched
# (i.e. execvp rules)
engine = docker

# The type of image to build
#imagetype = oe

# The name of the tag given to the image. If you want to keep around different
# Pyrex images simultaneously, each should have a unique tag
tag = ${env:PYREX_BUILD_NILRT_IMAGE}

# If set to 1, the image is built up locally every time the environment is
# sourced. If set to 0, building the image will be skipped, which means that
# the container engine may attempt to download a prebuilt image from a
# repository
buildlocal = 0

# The name of the registry where to find the image whose complete name is stored
# in tag variable. This variable is only used when buildlocal is set to 0.
#registry = docker.io

# A list of environment variables that should be imported as Pyrex
# configuration variables in the "env" section, e.g. ${env:HOME}. Note that
# environment variables accessed in this way must be set or an error will
# occur. Default values can be assigned by making an "env" section in this file
# and populating it with the default values. Also note that Pyrex will attempt
# to perform variable expansion on the environment variable values, so care
# should be taken
envimport =
	HOME
	PYREX_BIND
	PYREX_BUILD_NILRT_IMAGE

[imagebuild]
# The command used to build container images
buildcommand = bash ${pyrex:pyrexroot}/../../docker/create-build-nilrt.sh

# Build quietly?
#quiet = true
quiet = false

# Environment variables to set when building the image
#env =
#   DOCKER_BUILDKIT=1

# Capture options. Changes in the section only affect when a Pyrex container is
# initialized
[capture]
envvars =
	BB_ENV_PASSTHROUGH_ADDITIONS
#	TERM
#   BDIR
#   BITBAKEDIR
#   OEROOT

# Runtime options. Changes in this section take effect the next time a Pyrex
# command is run
[run]
# A list of directories that should be bound when running in the container
bind =
   ${env:PYREX_BIND}

# A list of environment variables that should be propagated to the container
# if set in the parent environment
envvars =
	SSTATE_MIRRORS
#	GIT_REPODIR
#   http_proxy
#   https_proxy
#   SSH_AUTH_SOCK

# Environment variables that contain the path to a socket that should be
# proxied into the container (if set in the host environment)
#envsockproxy =
#   SSH_AUTH_SOCK

# Extra arguments to pass when running the image. For example:
#   --mount type=bind,src=${env:HOME}/.ssh,dst=${env:HOME}/.ssh,readonly
#   --device /dev/kvm
args =
	--device /dev/kvm
	--mount type=bind,src=/tmp,dst=/tmp

# Prefix for all Pyrex commands. Useful for debugging. For example:
#   strace -ff -ttt -o strace.log --
#commandprefix =

# Assign default values for environment variables in this section
[env]
#PYREX_BIND=
