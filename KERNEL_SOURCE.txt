NI Linux Real-Time Kernel Source README

I. Introduction

Use these instructions to build a kernel that can boot on
NI Linux Real-Time targets.

Note: National Instruments does not support kernels other than one
provided by National Instruments. Any kernel other than what is
provided by National Instruments may not have the same performance,
determinism, features, or basic functionality.

Requirements: 
Linux machine to build the kernel
GNU Make installed
The mksquashfs utility installed
The build-essential package installed
The u-boot-tools package installed (for ARM builds only)

II. Downloading the Source

The kernel source for NI Linux Real-Time targets is available for 
download from the following locations, depending on whether you want
the source for ARM-based targets or Intel x86-based targets.

*** X86_64 (Ex: cRIO-903x, cDAQ-913x, etc.):
1. Clone the source from github.com/ni/linux.

    git clone https://github.com/ni/linux.git
    cd linux

2. Checkout the branch that corresponds to the release you are using. For
2014, this branch is nilrt_pub/14.0/3.10

    git checkout nilrt_pub/14.0/3.10

*** ARMV7-A (Ex: cRIO-9068, myRIO, sbRIO/somRIO):
For 15.0 and newer, you can follow the same instructions as for the
X86_64 source. Otherwise:

1. Download the source and patches from 
http://download.ni.com/ni-linux-rt/src/.
2. Extract the source.
3. Apply the patches sequentially (0001 coming first, 0002 next, etc.)

III. Using the Tools
You can use any cross-compilation toolchain of your choosing, or you can
download the toolchains from ni.com or build them yourself.

The toolchains are available for download at
armv7-a: http://www.ni.com/download/labview-real-time-module-2014/4957/en/
x86_64: http://www.ni.com/download/labview-real-time-module-2014/4959/en/

Please note that the 2014 toolchains are recommend for both 14.x and
15.x builds.

To build the toolchains yourself:

1. Refer to the README to get started with building OpenEmbedded components,
and build the meta-toolchain component.

    . env-nilrt-$MACHINE
    bitbake meta-toolchain

This creates the tools you need to build the kernel.

2. Extract the toolchain to a location on your computer, optionally placing
the tools on your PATH environment variable. Placing the tools on your PATH
variable will make using the tools simpler, allowing you to reference the
tools by name instead of providing the full path to the executables.

IV. Compiling the kernel
1. Set the kernel configuration to match NI’s settings:
*** ARMV7-A:
  export ARCH=arm
  export CROSS_COMPILE=/path/to/toolchain/bin/arm-nilrt-linux-gnueabi-
  make nati_zynq_defconfig
*** X86_64:
  export ARCH=x86_64
  export CROSS_COMPILE=/path/to/toolchain/x86_64-nilrt-linux-
  make nati_x86_64_defconfig

2. Build the kernel by running "make ni-pkg" (the ARCH and CROSS_COMPILE 
variables have already been set in the previous steps). This creates the
kernel image, headers squashfs image, and modules suitable for use on
NI Linux Real-Time targets.

Once the kernel image and support files have been created, copy the kernel
image, modules, and header squashfs to the target. Enable the Secure
Shell Server on your target or enable WebDAV to copy the files to the
controller. Note that $KERNEL_ROOT refers to the location where the kernel
source exists on your Linux build machine and $ARCH refers to the architecture
for which you built the kernel.

*** ARMV7-A:
The kernel image is the ni_zynq_custom_runmodekernel.itb file at
$KERNEL_ROOT/ni-install/arm/boot. Copy this file to /boot/linux_runmode.itb
on the target.

*** X86_64:
The kernel image is the bzImage file at $KERNEL_ROOT/ni-install/x86/boot.
Copy this file to /boot/runmode/ on the target.

*** ALL TARGETS:
Copy the resulting $KERNEL_ROOT/ni-install/$ARCH/lib/modules/ directory to
the target such that all of the new kernel modules exist on the target at
/lib/modules/$VERSION/. Note the newly built modules directory contains 
symbolic links to the build and source directories, do not copy the linked 
directories to your target.

Also copy the resulting $KERNEL_ROOT/ni-install/$ARCH/headers/headers.squashfs
to the target's /usr/local/natinst/tools/module-versioning-image.squashfs file

Finally, remove the cached version of the kernel header version file by
deleting the /usr/local/natinst/tools/kernel_version file (if it exists).

Reboot the target and check that the target successfully boots. Log into
a shell and check that your kernel is running by issuing "uname -a".

At this point, you should also be able to install NI drivers to the
controller from MAX.

*** HELP! MY TARGET DOESN'T BOOT! ***
If, after building and putting a new kernel on the target, you are unable
to boot successfully, refer to your controller's documentation on forcing
the controller to boot into safe mode and format from MAX.

*** NOTE ***
Changes to the kernel running on the target will be lost in certain operations
from MAX, including formatting the target and uninstalling all components.
