#!/usr/bin/python3

import argparse
import csv
from pathlib import Path
from pprint import pprint
import sys


def get_cves(filename):
    with open(filename, newline='') as fp:
        dialect = None
        try:
            dialect = csv.Sniffer().sniff(fp.read(1024), delimiters=",\t;")
        except csv.Error:
            dialect = "excel"
            pass
        fp.seek(0)

        reader = csv.reader(fp, dialect)
        global headings
        headings = next(reader)
        rows = [dict(zip(headings, line)) for line in reader]
        # Each cve entry in the dict is a dict of packages it appears in,
        # and the corresponding entries from the csv
        cves = {}
        for row in rows:
            cve = row["id"]
            package_name = row["package_name"]
            if cve not in cves.keys():
                cves[cve] = {}
            cves[cve][package_name] = row
        return cves
    
def main(argv=sys.argv[1:]):
    parser = argparse.ArgumentParser(description="Parse the CVEs in the given csv files and generate diff information")
    parser.add_argument("old_csv", type=Path, help="Path to the older csv file.")
    parser.add_argument("new_csv", type=Path, help="Path to the newer csv file")
    parser.add_argument("-o", "--output-file", default="new_cves_introduced.csv")

    args = parser.parse_args(argv)

    # Compare new to old, get what was added, changed and removed.
    # We only write what was added to the csv file.

    parsed_new_cves = get_cves(args.new_csv)
    parsed_old_cves = get_cves(args.old_csv)

    new_cves_added = {}
    existing_cves_added_to_new_pkg = {}
    removed_cves = {}
    for cve in parsed_new_cves:
        if cve not in parsed_old_cves:
            new_cves_added[cve] = parsed_new_cves[cve]
        else:
            # check if the cve has been added to any packages
            for package in parsed_new_cves[cve]:
                if package not in parsed_old_cves[cve]:
                    existing_cves_added_to_new_pkg[cve] = parsed_new_cves[cve][package]

    for cve in parsed_old_cves:
        if cve not in parsed_new_cves:
            removed_cves[cve] = parsed_old_cves[cve]

    with open(args.output_file, 'w', newline='') as fp:
        writer = csv.DictWriter(fp, fieldnames=headings)
        writer.writeheader()
        for row in new_cves_added:
            for package in new_cves_added[row]:
                writer.writerow(new_cves_added[row][package])


if __name__ == "__main__":
    sys.exit(main())