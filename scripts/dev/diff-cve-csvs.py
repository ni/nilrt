#!/usr/bin/python3

import argparse
import csv
import logging
from pathlib import Path
from pprint import pprint
import sys

logger = logging.getLogger("diff-cve-csvs.py")


# field names, ordered as they will appear in the output files
FIELD_NAMES = [
    "id",
    "layer",
    "package_name",
    "package_version",
    "status",
    "summary",
    "score_v2",
    "score_v3",
    "vector",
    "more_information",
]


def oe_cve_id(cve_data):
    """In OpenEmbedded, the same CVE might appear assigned to multiple
    packages. This method returns a fully-qualified ID, which includes
    the package name."""
    return "/".join([
        cve_data["id"],
        cve_data["package_name"],
    ])

def read_cve_summary(summary_filepath):
    logger.info(f"Reading CVE summary CSV file: {summary_filepath}")
    cves = {}
    with open(summary_filepath, "r") as fp_summary:
        reader = csv.DictReader(fp_summary)
        for entry in reader:
            id = oe_cve_id(entry)
            if id in cves.keys():
                logger.warning(f"Duplicate entry found for {id}. Only latest value will be used.")
            cves[id] = entry
    logger.info(f"Parsed {len(cves)} cves.")
    return cves

def iter_added_cves(old_cves, new_cves):
    for new_cve in (new_cves.keys() - old_cves.keys()):
        yield new_cves[new_cve]

def write_cve_summary(file, cves):
    writer = csv.DictWriter(file, FIELD_NAMES)
    writer.writeheader()
    writer.writerows(cves)
    logger.info(f"Wrote {len(cves)} entries.")
    

def main(argv=sys.argv[1:]):
    parser = argparse.ArgumentParser(description="Parse the CVEs in the given csv files and generate diff information")
    parser.add_argument("old_csv", type=Path, help="Path to the older csv file.")
    parser.add_argument("new_csv", type=Path, help="Path to the newer csv file")
    parser.add_argument("-v", "--verbose", action="count")

    args = parser.parse_args(argv)

    if args.verbose >= 2:
        logging.basicConfig(level=logging.DEBUG)
    elif args.verbose >= 1:
        logging.basicConfig(level=logging.INFO)

    # Compare new to old, get what was added, changed and removed.
    # We only write what was added to the csv file.

    old_cves = read_cve_summary(args.old_csv)
    new_cves = read_cve_summary(args.new_csv)

    added_cves = list(iter_added_cves(old_cves, new_cves))
    print(f"Found {len(added_cves)} added CVEs.")
    if len(added_cves) > 0:
        logger.info("Writing added_cves.csv file.")
        with open("added_cves.csv", "w") as fp_added:
            write_cve_summary(fp_added, added_cves)

    return 0


if __name__ == "__main__":
    sys.exit(main())